#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mongoose:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

  const webserver=require('socket.io');
  
  const io=webserver(server,
    {
      cors: {
        origin: '*',
        methods: ["GET", "POST"],
        allowedHeaders: ["application/json"],
      }
    })
  io.on('connection',(socket)=>{
    console.log('client connected')
  })
  io.emit('hello',{name:'pawan'})

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
const mongoose = require('mongoose');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// const connectdb=()=>{
  
// const connect = () => {
//     mongoose.connect('mongodb+srv://classnotes9610:UsZ1Dz3XedlDBm7g@cluster0.jgxpksk.mongodb.net/shop?retryWrites=true&w=majority')
//         .then((res) => {
//             // console.log(res)
//         })
//         .catch(err => console.log(err))
// }
// }
// connectdb();

module.exports=server